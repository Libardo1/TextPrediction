t[, p := 0.0]
t
t[, p := as.numeric(unigram.interpolate(N=N))]
t[, p := unigram.interpolate(N=N)]
t[, p := 0.1]
t[, p := rep(0.1, nrow(t))]
t
t[, p := unigram.interpolate(N=N)]
t
t[, p := unigram.interpolate(N)]
t[, p := unigram.interpolate(.N)]
t[, p := unigram.interpolate(N=.N)]
t
t[, p := .unigram.interpolate(N=N)]
t[, p := lapply(.SD, unigram.interpolate(N=N))]
t[, p := lapply(.SD, unigram.interpolate(N=.N))]
t[, p := lapply(.SD, unigram.interpolate(N=.SD$N))]
t[, p := lapply(.SD, unigram.interpolate)]
t[, p := lapply(.SD, function(i) unigram.interpolate(N=i$N))]
t[, p := lapply(.SD, function(i) unigram.interpolate(N=N))]
t
t[, p := unigram.interpolate(N)]
t[, p := unigram.interpolate(N=N)]
t
t[, p := unigram.interpolate(N=.N)]
t
t[, p := unigram.interpolate(N=N), by = N]
t
t<-head(unigram)
t[, p := unigram.interpolate(N=N), by = N]
t
t<-head(unigram)
t
t[, p := unigram.interpolate(N=N), by = N]
t
unigram[, p := unigram.interpolate(N=N), by = N]
unigram
unigram[order(-p)]
t <- head(bigram)
bigram.interpolate <- function(w2, N){
uniN <- unigram[w2]$N
biN <- N
triN <- NA
fourN <- NA
return(interpolate.sum(uniN, biN, triN, fourN))
}
t
t[, p := bigram.interpolate(w2 = word2, N=N), by = N]
t
t[order(-p)]
t <- bigram
t[, p := bigram.interpolate(w2 = word2, N=N), by = N]
t[order(-p)]
t[, p := bigram.interpolate(w2 = word2, N=N), by = .SD]
t[order(-p)]
t[, p := bigram.interpolate(w2 = word2, N=N)]
t[order(-p)]
t[, p := bigram.interpolate(w2 = word2, N=N), by="word1,word2"]
t
unigram <- readRDS("shinyapp/unigram.Rds")
bigram <- readRDS("shinyapp/bigram.Rds")
trigram <- readRDS("shinyapp/trigram.Rds")
fourgram <- readRDS("shinyapp/fourgram.Rds")
unigram <- readRDS("unigram.Rds")
bigram <- readRDS("bigram.Rds")
trigram <- readRDS("trigram.Rds")
fourgram <- readRDS("fourgram.Rds")
unigram[, p := unigram.interpolate(N=N), by = "word"]
unigram
unigram[order(-p)]
clean(":D")
clean(" :D ")
clean(" :D <3")
clean(" :D <3")
clean <- function(corpus){
# replace any character that is not alphanumeric or symbols
##cleaned <- stri_replace_all(tolower(corpus), regex = "[^ a-zA-Z0-9!#$%'\\(),-./:;=?&@_`{}^|~\\[\\]]|\"", replacement = "")
cleaned <- stri_replace_all(tolower(corpus), regex = "[^ a-zA-Z0-9!',\\-./:;?@()]+|\"", replacement = "")
# cleaned <- remove_stopwords(cleaned, stopwords, lines = T)
cleaned <- stri_replace_all(cleaned, regex = "'ve\\b", replacement = " have")
cleaned <- stri_replace_all(cleaned, regex = "'re\\b", replacement = " are")
cleaned <- stri_replace_all(cleaned, regex = "n't\\b", replacement = " not")
cleaned <- stri_replace_all(cleaned, regex = "'ll\\b", replacement = " will")
cleaned <- stri_replace_all(cleaned, regex = "'d\\b", replacement = " would")
cleaned <- stri_replace_all(cleaned, regex = "\\b(i'm|im)\\b", replacement = "i am")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(isnt)\\b", replacement = "is not")
cleaned <- stri_replace_all(cleaned, regex = "\\b(he|she|it|how|that|there|what|when|who|why|where)'?s\\b", replacement = "$1 is")
cleaned <- stri_replace_all(cleaned, regex = "\\bu\\b", replacement = "you")
cleaned <- stri_replace_all(cleaned, regex = "\\bur\\b", replacement = "your")
cleaned <- stri_replace_all(cleaned, regex = "\\b(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)\\b|^(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)\\b|\\b(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)$", replacement = "<pronoun>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(am|is|are|was|were|be|been|being|will be)\\b", replacement = "<be>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(have|has|had|having)\\b", replacement = "<have>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(do|does|did|doing)\\b", replacement = "<do>")
cleaned <- stri_replace_all(cleaned, regex = "\\b(\\w*f+u+c+k+\\w*|\\w*b+i+t+c+h+\\w*|\\w*s+h+i+t+\\w*|\\w*c+u+n+t+\\w*|\\w*f+a+g+g+o+t\\w*|t+w+a+t+|\\w*a+s+s+h+o+l+e+\\w*|\\w*n+i+g+g+e+r+\\w*)\\b", replacement = " <profanity> ")
#cleaned <- stri_replace_all(cleaned, regex = " a|an|the|and|of|this|that|these|those ", replacement = "")
# find and replace email data
cleaned <- stri_replace_all(cleaned, regex = " ?([\\w\\d_.-]+)@([\\w\\d.-]+)\\.([\\w.]{2,6}) ?", replacement = " <email> ")
# find and replace url
cleaned <- stri_replace_all(cleaned, regex =" ?(https?:/+)?(([\\w\\d]+)\\.){1,4}\\w{2,4}[/\\w-!=?@_\\d]* ?", replacement = " <url> ", simplify = T, omit_no_match = T)
# find and replace emoji data
cleaned <- stri_replace_all(cleaned, regex = "[<>0O%]?[:;=8]([-o*']+)?[()dbp/ocs]+ | [()dbp/}{#|c]+([-o*']+)?[:;=8][<>]?|<+3+|<+/+3+|[-o0><^][_.]+[-o0><^] ", replacement = " <emoticon> ")
# find and replace date data
cleaned <- stri_replace_all(cleaned, regex = " ?([0-1][1-2]|[1-9])[/]([0-2][0-9]|3[01]|[1-9])([/]([0-9]{4}|[0-9]{2}))?|[1-9]0s|[0-9]{4}s ?", replacement = " <date> ")
# find and replace time data
cleaned <- stri_replace_all(cleaned, regex ="\\b(([0-1]?[0-9]|2[1-4])([:][0-5]?[0-9]){1,2} ?([ap][. ]?[m][. ]?)? ?)|\\b([0-1]?[0-9]|2[1-4])(-\\d+)? ?[ap][. ]?[m][. ]?\\b", replacement =" <time> ")
# find and replace phone data
cleaned <- stri_replace_all(cleaned, regex ="\\b[ :-]1?[-(]?[\\d]{3}[-.)]?[\\d]{3}[-.]?[\\d]{4}\\b ?", replacement= " <phone> ")
# remove extraneous punctuation
cleaned <- stri_replace_all(cleaned, regex = "(?<=[!/,.:;?#])[!,.:;#?]+|'+", replacement = "")
# break lines into sentences
cleaned <- unlist(stri_split(cleaned, regex = " ?[!?;:.]+ +", omit_empty=T))
#cleaned <- unlist(stri_split_boundaries(cleaned, type = "sentence"))
cleaned <- stri_replace_all(cleaned, regex = "[^ a-zA-Z0-9<>#]+", replacement = " ")
#cleaned <- stri_replace_all(cleaned, regex = "[-/]+", replacement = " ")
# find and replace number data
cleaned <- stri_replace_all(cleaned, regex ="\\b[\\d]+([-,.\\d]+)?(th|st|nd|rd)?", replacement= " <num> ")
##cleaned <- stri_replace_all(cleaned, regex =" ?[$]?([0-9,]+)?([0-9]+|[0-9]+[.-][0-9]+|[.][0-9]+)(%|th|st|nd)? ",replacement= " _NUM_ ")
# remove leading/trailing/extraneou space nad apostrophe
cleaned <- stri_replace_all(cleaned, regex = "^ +|(?<= ) +| +$", replacement = "")
# break sentences into words
###cleaned <- stri_split(cleaned, regex = "[[:space:]]+", omit_empty = T)
###cleaned <- stri_split_boundaries(cleaned, type = "word", skip_word_none=TRUE)
# drop empty elements
cleaned <- cleaned[lapply(cleaned, nchar)>0]
# add start and stop
return(cleaned)
}
clean(" :D <3")
clean <- function(corpus){
# replace any character that is not alphanumeric or symbols
##cleaned <- stri_replace_all(tolower(corpus), regex = "[^ a-zA-Z0-9!#$%'\\(),-./:;=?&@_`{}^|~\\[\\]]|\"", replacement = "")
cleaned <- stri_replace_all(tolower(corpus), regex = "[^ a-zA-Z0-9!',\\-./:;?@()]+|\"", replacement = "")
# cleaned <- remove_stopwords(cleaned, stopwords, lines = T)
cleaned <- stri_replace_all(cleaned, regex = "'ve\\b", replacement = " have")
cleaned <- stri_replace_all(cleaned, regex = "'re\\b", replacement = " are")
cleaned <- stri_replace_all(cleaned, regex = "n't\\b", replacement = " not")
cleaned <- stri_replace_all(cleaned, regex = "'ll\\b", replacement = " will")
cleaned <- stri_replace_all(cleaned, regex = "'d\\b", replacement = " would")
cleaned <- stri_replace_all(cleaned, regex = "\\b(i'm|im)\\b", replacement = "i am")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(isnt)\\b", replacement = "is not")
cleaned <- stri_replace_all(cleaned, regex = "\\b(he|she|it|how|that|there|what|when|who|why|where)'?s\\b", replacement = "$1 is")
cleaned <- stri_replace_all(cleaned, regex = "\\bu\\b", replacement = "you")
cleaned <- stri_replace_all(cleaned, regex = "\\bur\\b", replacement = "your")
cleaned <- stri_replace_all(cleaned, regex = "\\b(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)\\b|^(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)\\b|\\b(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)$", replacement = "<pronoun>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(am|is|are|was|were|be|been|being|will be)\\b", replacement = "<be>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(have|has|had|having)\\b", replacement = "<have>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(do|does|did|doing)\\b", replacement = "<do>")
cleaned <- stri_replace_all(cleaned, regex = "\\b(\\w*f+u+c+k+\\w*|\\w*b+i+t+c+h+\\w*|\\w*s+h+i+t+\\w*|\\w*c+u+n+t+\\w*|\\w*f+a+g+g+o+t\\w*|t+w+a+t+|\\w*a+s+s+h+o+l+e+\\w*|\\w*n+i+g+g+e+r+\\w*)\\b", replacement = " <profanity> ")
#cleaned <- stri_replace_all(cleaned, regex = " a|an|the|and|of|this|that|these|those ", replacement = "")
# find and replace email data
cleaned <- stri_replace_all(cleaned, regex = " ?([\\w\\d_.-]+)@([\\w\\d.-]+)\\.([\\w.]{2,6}) ?", replacement = " <email> ")
# find and replace url
cleaned <- stri_replace_all(cleaned, regex =" ?(https?:/+)?(([\\w\\d]+)\\.){1,4}\\w{2,4}[/\\w-!=?@_\\d]* ?", replacement = " <url> ", simplify = T, omit_no_match = T)
# find and replace emoji data
cleaned <- stri_replace_all(cleaned, regex = "[<>0O%]?[:;=8]([-o*']+)?[()dbp/ocs]+ | [()dbp/}{#|c]+([-o*']+)?[:;=8][<>]?|<+3+|<+/+3+|[-o0><^][_.]+[-o0><^]", replacement = " <emoticon> ")
# find and replace date data
cleaned <- stri_replace_all(cleaned, regex = " ?([0-1][1-2]|[1-9])[/]([0-2][0-9]|3[01]|[1-9])([/]([0-9]{4}|[0-9]{2}))?|[1-9]0s|[0-9]{4}s ?", replacement = " <date> ")
# find and replace time data
cleaned <- stri_replace_all(cleaned, regex ="\\b(([0-1]?[0-9]|2[1-4])([:][0-5]?[0-9]){1,2} ?([ap][. ]?[m][. ]?)? ?)|\\b([0-1]?[0-9]|2[1-4])(-\\d+)? ?[ap][. ]?[m][. ]?\\b", replacement =" <time> ")
# find and replace phone data
cleaned <- stri_replace_all(cleaned, regex ="\\b[ :-]1?[-(]?[\\d]{3}[-.)]?[\\d]{3}[-.]?[\\d]{4}\\b ?", replacement= " <phone> ")
# remove extraneous punctuation
cleaned <- stri_replace_all(cleaned, regex = "(?<=[!/,.:;?#])[!,.:;#?]+|'+", replacement = "")
# break lines into sentences
cleaned <- unlist(stri_split(cleaned, regex = " ?[!?;:.]+ +", omit_empty=T))
#cleaned <- unlist(stri_split_boundaries(cleaned, type = "sentence"))
cleaned <- stri_replace_all(cleaned, regex = "[^ a-zA-Z0-9<>#]+", replacement = " ")
#cleaned <- stri_replace_all(cleaned, regex = "[-/]+", replacement = " ")
# find and replace number data
cleaned <- stri_replace_all(cleaned, regex ="\\b[\\d]+([-,.\\d]+)?(th|st|nd|rd)?", replacement= " <num> ")
##cleaned <- stri_replace_all(cleaned, regex =" ?[$]?([0-9,]+)?([0-9]+|[0-9]+[.-][0-9]+|[.][0-9]+)(%|th|st|nd)? ",replacement= " _NUM_ ")
# remove leading/trailing/extraneou space nad apostrophe
cleaned <- stri_replace_all(cleaned, regex = "^ +|(?<= ) +| +$", replacement = "")
# break sentences into words
###cleaned <- stri_split(cleaned, regex = "[[:space:]]+", omit_empty = T)
###cleaned <- stri_split_boundaries(cleaned, type = "word", skip_word_none=TRUE)
# drop empty elements
cleaned <- cleaned[lapply(cleaned, nchar)>0]
# add start and stop
return(cleaned)
}
clean(" :D <3")
clean(" :D <3 </3")
clean(" :D  <3 </3")
clean <- function(corpus){
# replace any character that is not alphanumeric or symbols
##cleaned <- stri_replace_all(tolower(corpus), regex = "[^ a-zA-Z0-9!#$%'\\(),-./:;=?&@_`{}^|~\\[\\]]|\"", replacement = "")
cleaned <- stri_replace_all(tolower(corpus), regex = "[^ a-zA-Z0-9!',\\-./:;<?@()]+|\"", replacement = "")
# cleaned <- remove_stopwords(cleaned, stopwords, lines = T)
cleaned <- stri_replace_all(cleaned, regex = "'ve\\b", replacement = " have")
cleaned <- stri_replace_all(cleaned, regex = "'re\\b", replacement = " are")
cleaned <- stri_replace_all(cleaned, regex = "n't\\b", replacement = " not")
cleaned <- stri_replace_all(cleaned, regex = "'ll\\b", replacement = " will")
cleaned <- stri_replace_all(cleaned, regex = "'d\\b", replacement = " would")
cleaned <- stri_replace_all(cleaned, regex = "\\b(i'm|im)\\b", replacement = "i am")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(isnt)\\b", replacement = "is not")
cleaned <- stri_replace_all(cleaned, regex = "\\b(he|she|it|how|that|there|what|when|who|why|where)'?s\\b", replacement = "$1 is")
cleaned <- stri_replace_all(cleaned, regex = "\\bu\\b", replacement = "you")
cleaned <- stri_replace_all(cleaned, regex = "\\bur\\b", replacement = "your")
cleaned <- stri_replace_all(cleaned, regex = "\\b(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)\\b|^(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)\\b|\\b(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)$", replacement = "<pronoun>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(am|is|are|was|were|be|been|being|will be)\\b", replacement = "<be>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(have|has|had|having)\\b", replacement = "<have>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(do|does|did|doing)\\b", replacement = "<do>")
cleaned <- stri_replace_all(cleaned, regex = "\\b(\\w*f+u+c+k+\\w*|\\w*b+i+t+c+h+\\w*|\\w*s+h+i+t+\\w*|\\w*c+u+n+t+\\w*|\\w*f+a+g+g+o+t\\w*|t+w+a+t+|\\w*a+s+s+h+o+l+e+\\w*|\\w*n+i+g+g+e+r+\\w*)\\b", replacement = " <profanity> ")
#cleaned <- stri_replace_all(cleaned, regex = " a|an|the|and|of|this|that|these|those ", replacement = "")
# find and replace email data
cleaned <- stri_replace_all(cleaned, regex = " ?([\\w\\d_.-]+)@([\\w\\d.-]+)\\.([\\w.]{2,6}) ?", replacement = " <email> ")
# find and replace url
cleaned <- stri_replace_all(cleaned, regex =" ?(https?:/+)?(([\\w\\d]+)\\.){1,4}\\w{2,4}[/\\w-!=?@_\\d]* ?", replacement = " <url> ", simplify = T, omit_no_match = T)
# find and replace emoji data
cleaned <- stri_replace_all(cleaned, regex = "[<>0O%]?[:;=8]([-o*']+)?[()dbp/ocs]+ | [()dbp/}{#|c]+([-o*']+)?[:;=8][<>]?|<+3+|<+/+3+|[-o0><^][_.]+[-o0><^]", replacement = " <emoticon> ")
# find and replace date data
cleaned <- stri_replace_all(cleaned, regex = " ?([0-1][1-2]|[1-9])[/]([0-2][0-9]|3[01]|[1-9])([/]([0-9]{4}|[0-9]{2}))?|[1-9]0s|[0-9]{4}s ?", replacement = " <date> ")
# find and replace time data
cleaned <- stri_replace_all(cleaned, regex ="\\b(([0-1]?[0-9]|2[1-4])([:][0-5]?[0-9]){1,2} ?([ap][. ]?[m][. ]?)? ?)|\\b([0-1]?[0-9]|2[1-4])(-\\d+)? ?[ap][. ]?[m][. ]?\\b", replacement =" <time> ")
# find and replace phone data
cleaned <- stri_replace_all(cleaned, regex ="\\b[ :-]1?[-(]?[\\d]{3}[-.)]?[\\d]{3}[-.]?[\\d]{4}\\b ?", replacement= " <phone> ")
# remove extraneous punctuation
cleaned <- stri_replace_all(cleaned, regex = "(?<=[!/,.:;?#])[!,.:;#?]+|'+", replacement = "")
# break lines into sentences
cleaned <- unlist(stri_split(cleaned, regex = " ?[!?;:.]+ +", omit_empty=T))
#cleaned <- unlist(stri_split_boundaries(cleaned, type = "sentence"))
cleaned <- stri_replace_all(cleaned, regex = "[^ a-zA-Z0-9<>#]+", replacement = " ")
#cleaned <- stri_replace_all(cleaned, regex = "[-/]+", replacement = " ")
# find and replace number data
cleaned <- stri_replace_all(cleaned, regex ="\\b[\\d]+([-,.\\d]+)?(th|st|nd|rd)?", replacement= " <num> ")
##cleaned <- stri_replace_all(cleaned, regex =" ?[$]?([0-9,]+)?([0-9]+|[0-9]+[.-][0-9]+|[.][0-9]+)(%|th|st|nd)? ",replacement= " _NUM_ ")
# remove leading/trailing/extraneou space nad apostrophe
cleaned <- stri_replace_all(cleaned, regex = "^ +|(?<= ) +| +$", replacement = "")
# break sentences into words
###cleaned <- stri_split(cleaned, regex = "[[:space:]]+", omit_empty = T)
###cleaned <- stri_split_boundaries(cleaned, type = "word", skip_word_none=TRUE)
# drop empty elements
cleaned <- cleaned[lapply(cleaned, nchar)>0]
# add start and stop
return(cleaned)
}
clean(" :D  <3 </3")
unigram
t <- head(bigram)
t
t <- head(bigram, n=14)
t
t[, p := bigram.interpolate(w2 = word2, N=N)]
t
t[, p := bigram.interpolate(w2 = word2, N=N), by = "word1,word2"]
t
t[order(-N)]
t[order(-P)]
t[order(-p)]
bigram[, p := bigram.interpolate(w2 = word2, N=N), by = "word1,word2"]
bigram
bigram[order(-p)]
bigram[order(word1, -p)]
bigram[order(word1, -N)]
t <- head(trigram)
trigram.interpolate <- function(w2, w3, N){
fourN <- NA
triN <- N
biN <- bigram[J(w2, w3)]$N
uniN <- unigram[w3]$N
return(interpolate.sum(uniN, biN, triN, fourN))
}
t[, p := trigram.interpolate(w2 = word2, word3 = word3, N=N), by = "word1,word2,word3"]
t[, p := trigram.interpolate(w2 = word2, w3 = word3, N=N), by = "word1,word2,word3"]
t
trigram[, p := trigram.interpolate(w2 = word2, w3 = word3, N=N), by = "word1,word2,word3"]
trigram
trigram[order(word1,word2, -p)]
trigram[order(-p)]
fourgram.interpolate <- function(w2, w3, w4,  N){
fourN <- N
triN <- trigram[J(w2, w3, w4)]$N
biN <- bigram[J(w3, w4)]$N
uniN <- unigram[w4]$N
return(interpolate.sum(uniN, biN, triN, fourN))
}
t <- head(fourgram)
t[, p := fourgram.interpolate(w2 = word2, w3 = word3, w4 = word4, N=N), by = "word1,word2,word3,word4"]
t
dim(fourgram)
system.time(t[, p := fourgram.interpolate(w2 = word2, w3 = word3, w4 = word4, N=N), by = "word1,word2,word3,word4"])
430000/6*.07
430000/6*.07/60
fourgram[, p := fourgram.interpolate(w2 = word2, w3 = word3, w4 = word4, N=N), by = "word1,word2,word3,word4"]
fourgram
head(test.set)
parse(head.test.set)
parse(head(test.set))
test.set
predict.interpolate <- function(phrase, k=3){
# phrase <<- parse(clean(input))
phrase <- replaceUnknown(phrase)
j <- length(phrase)
# print(c(phrase))
if(j == 1){
result <- c("bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}else if (j == 2){
result <- c("trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}else {
result <- c("fourgram" =fourgram[J(phrase[j-2], phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word4[1:k],
"trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}
return(result[!is.na(result)][1:k])
}
predict.interpolate("hi my ")
predict.interpolate("hi my name is")
predict.interpolate("hi my name is xing, what is yours ")
predict.interpolate <- function(phrase, k=3){
# phrase <<- parse(clean(input))
phrase <- replaceUnknown(phrase)
j <- length(phrase)
print(c(phrase))
if(j == 1){
result <- c("bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}else if (j == 2){
result <- c("trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}else {
result <- c("fourgram" =fourgram[J(phrase[j-2], phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word4[1:k],
"trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}
return(result[!is.na(result)][1:k])
}
predict.interpolate("hi my name is xing, what is yours ")
predict.interpolate(clean(parse("hi my name is xing, what is yours ")))
unigram["you"]
unigram["yours"]
parse(clean("hi my name is xing, what is yours ")))
parse(clean("hi my name is xing, what is yours "))
clean <- function(corpus){
# replace any character that is not alphanumeric or symbols
##cleaned <- stri_replace_all(tolower(corpus), regex = "[^ a-zA-Z0-9!#$%'\\(),-./:;=?&@_`{}^|~\\[\\]]|\"", replacement = "")
cleaned <- stri_replace_all(tolower(corpus), regex = "[^ a-zA-Z0-9!',\\-./:;<?@()]+|\"", replacement = "")
# cleaned <- remove_stopwords(cleaned, stopwords, lines = T)
cleaned <- stri_replace_all(cleaned, regex = "'ve\\b", replacement = " have")
cleaned <- stri_replace_all(cleaned, regex = "'re\\b", replacement = " are")
cleaned <- stri_replace_all(cleaned, regex = "n't\\b", replacement = " not")
cleaned <- stri_replace_all(cleaned, regex = "'ll\\b", replacement = " will")
cleaned <- stri_replace_all(cleaned, regex = "'d\\b", replacement = " would")
cleaned <- stri_replace_all(cleaned, regex = "\\b(i'm|im)\\b", replacement = "i am")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(isnt)\\b", replacement = "is not")
cleaned <- stri_replace_all(cleaned, regex = "\\b(he|she|it|how|that|there|what|when|who|why|where)'?s\\b", replacement = "$1 is")
cleaned <- stri_replace_all(cleaned, regex = "\\bu\\b", replacement = "you")
cleaned <- stri_replace_all(cleaned, regex = "\\bur\\b", replacement = "your")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)\\b|^(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)\\b|\\b(u|ur|i|me|my|myself|we|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|us)$", replacement = "<pronoun>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(am|is|are|was|were|be|been|being|will be)\\b", replacement = "<be>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(have|has|had|having)\\b", replacement = "<have>")
# cleaned <- stri_replace_all(cleaned, regex = "\\b(do|does|did|doing)\\b", replacement = "<do>")
cleaned <- stri_replace_all(cleaned, regex = "\\b(\\w*f+u+c+k+\\w*|\\w*b+i+t+c+h+\\w*|\\w*s+h+i+t+\\w*|\\w*c+u+n+t+\\w*|\\w*f+a+g+g+o+t\\w*|t+w+a+t+|\\w*a+s+s+h+o+l+e+\\w*|\\w*n+i+g+g+e+r+\\w*)\\b", replacement = " <profanity> ")
#cleaned <- stri_replace_all(cleaned, regex = " a|an|the|and|of|this|that|these|those ", replacement = "")
# find and replace email data
cleaned <- stri_replace_all(cleaned, regex = " ?([\\w\\d_.-]+)@([\\w\\d.-]+)\\.([\\w.]{2,6}) ?", replacement = " <email> ")
# find and replace url
cleaned <- stri_replace_all(cleaned, regex =" ?(https?:/+)?(([\\w\\d]+)\\.){1,4}\\w{2,4}[/\\w-!=?@_\\d]* ?", replacement = " <url> ", simplify = T, omit_no_match = T)
# find and replace emoji data
cleaned <- stri_replace_all(cleaned, regex = "[<>0O%]?[:;=8]([-o*']+)?[()dbp/ocs]+ | [()dbp/}{#|c]+([-o*']+)?[:;=8][<>]?|<+3+|<+/+3+|[-o0><^][_.]+[-o0><^]", replacement = " <emoticon> ")
# find and replace date data
cleaned <- stri_replace_all(cleaned, regex = " ?([0-1][1-2]|[1-9])[/]([0-2][0-9]|3[01]|[1-9])([/]([0-9]{4}|[0-9]{2}))?|[1-9]0s|[0-9]{4}s ?", replacement = " <date> ")
# find and replace time data
cleaned <- stri_replace_all(cleaned, regex ="\\b(([0-1]?[0-9]|2[1-4])([:][0-5]?[0-9]){1,2} ?([ap][. ]?[m][. ]?)? ?)|\\b([0-1]?[0-9]|2[1-4])(-\\d+)? ?[ap][. ]?[m][. ]?\\b", replacement =" <time> ")
# find and replace phone data
cleaned <- stri_replace_all(cleaned, regex ="\\b[ :-]1?[-(]?[\\d]{3}[-.)]?[\\d]{3}[-.]?[\\d]{4}\\b ?", replacement= " <phone> ")
# remove extraneous punctuation
cleaned <- stri_replace_all(cleaned, regex = "(?<=[!/,.:;?#])[!,.:;#?]+|'+", replacement = "")
# break lines into sentences
cleaned <- unlist(stri_split(cleaned, regex = " ?[!?;:.]+ +", omit_empty=T))
#cleaned <- unlist(stri_split_boundaries(cleaned, type = "sentence"))
cleaned <- stri_replace_all(cleaned, regex = "[^ a-zA-Z0-9<>#]+", replacement = " ")
#cleaned <- stri_replace_all(cleaned, regex = "[-/]+", replacement = " ")
# find and replace number data
cleaned <- stri_replace_all(cleaned, regex ="\\b[\\d]+([-,.\\d]+)?(th|st|nd|rd)?", replacement= " <num> ")
##cleaned <- stri_replace_all(cleaned, regex =" ?[$]?([0-9,]+)?([0-9]+|[0-9]+[.-][0-9]+|[.][0-9]+)(%|th|st|nd)? ",replacement= " _NUM_ ")
# remove leading/trailing/extraneou space nad apostrophe
cleaned <- stri_replace_all(cleaned, regex = "^ +|(?<= ) +| +$", replacement = "")
# break sentences into words
###cleaned <- stri_split(cleaned, regex = "[[:space:]]+", omit_empty = T)
###cleaned <- stri_split_boundaries(cleaned, type = "word", skip_word_none=TRUE)
# drop empty elements
cleaned <- cleaned[lapply(cleaned, nchar)>0]
# add start and stop
return(cleaned)
}
parse(clean("hi my name is xing, what is yours "))
predict.interpolate(parse(clean("hi my name is xing, what is yours ")))
predict(parse(clean("hi my name is xing, what is yours ")))
head(test.set)
test.interpolate <- function(raw){
# results <- data.table()
results <- data.table(actual = character(0), predicted1 = character(0),
predicted2 = character(0), predicted3 = character(0), correct = logical(0))
for(i in 1:length(raw)){
processed <- parse(raw[i])
for(j in 1:(length(processed)-1)){
# print(processed[1:j])
predicted <- predict.interpolate(processed[1:j])
correct <-{if(processed[j+1] %in% predicted) TRUE else FALSE}
results <- rbindlist(list(results, as.list(c(processed[j+1], predicted,  correct))))
}
}
return(results)
}
results2 <- test(test.set[1:200])
results3 <- test.interpolate(test.set[1:200])
predict.interpolate <- function(phrase, k=3){
# phrase <<- parse(clean(input))
phrase <- replaceUnknown(phrase)
j <- length(phrase)
# print(c(phrase))
if(j == 1){
result <- c("bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}else if (j == 2){
result <- c("trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}else {
result <- c("fourgram" =fourgram[J(phrase[j-2], phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word4[1:k],
"trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}
return(result[!is.na(result)][1:k])
}
results3 <- test.interpolate(test.set[1:200])
head(result2)
head(results2)
mean(as.logical(results2$correct))
mean(as.logical(results3$correct))
predict <- function(phrase, k=1){
# phrase <<- parse(clean(input))
phrase <- replaceUnknown(phrase)
j <- length(phrase)
# print(c(phrase))
if(j == 1){
result <- c("bigram" = bigram[phrase[j], nomatch=0][order(-N)]$word2[1:k],
"unigram" =unigram[order(-N)]$word[2:(k+1)])
}else if (j == 2){
result <- c("trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-N)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-N)]$word2[1:k],
"unigram" =unigram[order(-N)]$word[2:(k+1)])
}else {
result <- c("fourgram" =fourgram[J(phrase[j-2], phrase[j-1], phrase[j]), nomatch=0][order(-N)]$word4[1:k],
"trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-N)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-N)]$word2[1:k],
"unigram" =unigram[order(-N)]$word[2:(k+1)])
}
return(result[!is.na(result)][1:k])
}
predict.interpolate <- function(phrase, k=1){
# phrase <<- parse(clean(input))
phrase <- replaceUnknown(phrase)
j <- length(phrase)
# print(c(phrase))
if(j == 1){
result <- c("bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}else if (j == 2){
result <- c("trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}else {
result <- c("fourgram" =fourgram[J(phrase[j-2], phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word4[1:k],
"trigram" = trigram[J(phrase[j-1], phrase[j]), nomatch=0][order(-p)]$word3[1:k],
"bigram" = bigram[phrase[j], nomatch=0][order(-p)]$word2[1:k],
"unigram" =unigram[order(-p)]$word[2:(k+1)])
}
return(result[!is.na(result)][1:k])
}
results2 <- test(test.set[1:200])
results3 <- test.interpolate(test.set[1:200])
test.one <- function(raw){
# results <- data.table()
results <- data.table(actual = character(0), predicted1 = character(0), correct = logical(0))
for(i in 1:length(raw)){
processed <- parse(raw[i])
for(j in 1:(length(processed)-1)){
# print(processed[1:j])
predicted <- predict(processed[1:j], 1)
correct <-{if(processed[j+1] %in% predicted) TRUE else FALSE}
results <- rbindlist(list(results, as.list(c(processed[j+1], predicted, correct))))
}
}
return(results)
}
test.one.interpolate <- function(raw){
# results <- data.table()
results <- data.table(actual = character(0), predicted1 = character(0), correct = logical(0))
for(i in 1:length(raw)){
processed <- parse(raw[i])
for(j in 1:(length(processed)-1)){
# print(processed[1:j])
predicted <- predict.interpolate(processed[1:j], 1)
correct <-{if(processed[j+1] %in% predicted) TRUE else FALSE}
results <- rbindlist(list(results, as.list(c(processed[j+1], predicted, correct))))
}
}
return(results)
}
results4 <- test.one(test.set[1:200]); results5 <- test.one.interpolate(test.set[1:200])
mean(as.logical(results4$correct))
mean(as.logical(results5$correct))
gc()
