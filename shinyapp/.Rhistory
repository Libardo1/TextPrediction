"check_derivatives" = TRUE,
"check_derivatives_print" = "all"))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:2, 1]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
-sum(p[1:2, 2]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
-sum(p[1:2, 3]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
-sum(p[1:2, 4]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:100, 1]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 2]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 3]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 4]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
p
names[p]
names(p)
p.table <- as.data.table(p)
p.table
setkey(p.table, fourgram, trigram, bigram, unigram)
p[J(0,0,0,0)]
p.table[J(0,0,0,0)]
p.table[!J(0,0,0,0)]
p <- p.table[!J(0,0,0,0)]
p
p[1:2, ]
l <- nrow(p)
l
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda, l, p) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda, l, p){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts),
p = p[1:100, ],
l = 100)
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda, l, p) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda, l, p){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda, l, p) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda, l, p){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts),)
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda, l, p) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda, l, p){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts),
l = 100)
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda, l, p) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda, l, p){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts),
l = 100, p = p.table[1:100, ])
p
p.table
p <- p.table[!J(0,0,0,0)]
p
p <- p.table[!J(0,0,0,0)][1:100]
p
p <- p.table[!J(0,0,0,0)][8000:8100]
p
l <- 101
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda, l, p) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda, l, p){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts),
l = l, p = p)
p
l
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8, "maxeval" = 1000,
"local_opts"=local_opts))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8, "maxeval" = 1000,
"local_opts"=local_opts))$solution
sum(0.1093434, 0.2517215, 0.2955751, 0.3433599)
p <- p.table[!J(0,0,0,0)][8000:]
p <- p.table[!J(0,0,0,0)][6000:9000]
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8, "maxeval" = 1000,
"local_opts"=local_opts))$solution
l
l <- 3001
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8, "maxeval" = 1000,
"local_opts"=local_opts))$solution
l <- 3001
p
p[1000:3000, ]
p <- p[1000:3000, ]
l <- nrow(p)
l
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8, "maxeval" = 1000,
"local_opts"=local_opts))$solution
p <- p[1000:2000, ]
l
l <- nrow(p)
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8, "maxeval" = 1000,
"local_opts"=local_opts))$solution
p <- p.table[!J(0,0,0,0)][1:1000]
l <- nrow(p)
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8, "maxeval" = 1000,
"local_opts"=local_opts))$solution
p <- p.table[!J(0,0,0,0)][1]
l <-1
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8, "maxeval" = 1000,
"local_opts"=local_opts))$solution
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) sum(-log(apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum))),
eval_grad_f= function(lambda){
c(sum(p[1:2, 1]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
sum(p[1:2, 2]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
sum(p[1:2, 3]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
sum(p[1:2, 4]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:100, 1]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 2]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 3]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 4]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
p
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:100, 1]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 2]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 3]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 4]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) sum(-log(apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum))),
eval_grad_f= function(lambda){
c(sum(p[1:2, 1]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
sum(p[1:2, 2]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
sum(p[1:2, 3]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
sum(p[1:2, 4]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
sum(-log(apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)))
lambda
apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)
p[2]
p
p <- p.table[!J(0,0,0,0)][1:100]
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:100, 1]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 2]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 3]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)),
-sum(p[1:100, 4]/apply(matrix(rep(lambda,100), 100, 4, byrow = T)*p[1:100, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
p
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) sum(-log(apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum))),
eval_grad_f= function(lambda){
c(sum(p[1:2, 1]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
sum(p[1:2, 2]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
sum(p[1:2, 3]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
sum(p[1:2, 4]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) sum(-log(apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:2, 1]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
-sum(p[1:2, 2]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
-sum(p[1:2, 3]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)),
-sum(p[1:2, 4]/apply(matrix(rep(lambda,2), 2, 4, byrow = T)*p[1:2, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) sum(-log(apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:1, 1]/apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum)),
-sum(p[1:1, 2]/apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum)),
-sum(p[1:1, 3]/apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum)),
-sum(p[1:1, 4]/apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
p
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:1, 1]/apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum)),
-sum(p[1:1, 2]/apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum)),
-sum(p[1:1, 3]/apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum)),
-sum(p[1:1, 4]/apply(matrix(rep(lambda,1), 1, 4, byrow = T)*p[1:1, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
lambda*p[1:l, ]
lambda
p[1]
p[1]/4
apply(lambda*p[1], 1, sum)
log(apply(lambda*p[1], 1, sum))
-sum(log(apply(lambda*p[1], 1, sum)))
-sum(p[1, 1]/apply(lambda*p[1], 1, sum)),
-sum(p[1, 1]/apply(lambda*p[1], 1, sum))
p[1, 1]/apply(lambda*p[1], 1, sum)
p[1, 1]
p[1,1]
p[1][1]
p[1,1]
t <- clean(test.set)
t <- wrap(t)
head(t)
tokens <- unlist(stri_split(t, regex = "[[:space:]]+", omit_empty = T))
table <- paste(c("NA", "NA", "NA", tokens), c("NA", "NA", tokens, "NA"), c("NA", tokens, "NA", "NA"), c(tokens, "NA", "NA", "NA"))[4:length(tokens)]
table <- data.table(t(sapply(stri_split(table, fixed = " "), c)))
table
table <- table[V1!="</s>"&V2!="<s>"&V2!="</s>"&V3!="<s>"&V3!="</s>"&V4!="<s>"&V4!="</s>"]
table[!(V1 %in% unigram$word), V1:="<unk>"]
table[!(V2 %in% unigram$word), V2:="<unk>"]
table[!(V3 %in% unigram$word), V3:="<unk>"]
table[!(V4 %in% unigram$word), V4:="<unk>"]
table <- table[, sum(N), by = "V1,V2,V3,V4"]
setkey(table, V1, V2, V3, V4)
data <- t(apply(table, 1, function(i) interpolate(unlist(i))))
data <- t(apply(table[1], 1, function(i) interpolate(unlist(i))))
data
data <- t(apply(table[1:2], 1, function(i) interpolate(unlist(i))))
data
data <- t(apply(table[1:1000], 1, function(i) interpolate(unlist(i))))
data
table[1:1000]
table[900:1000]
unigram
table[1]
table[]
table[J("<unk>","<unk>","<unk>")]
table[J("<unk>","<unk>","<unk>") |J("<unk>","<unk>") | "<unk>"]
table[J("<unk>","<unk>","<unk>") | J("<unk>","<unk>") | "<unk>"]
table[1:100]
table[1:1000]
table[1:2000]
table[1:5000]
table[1:8000]
table[1:10000]
table[1:100000]
data
p <- data
l <- nrow(p)
nloptr( x0=c(0.25, 0.25, 0.25, 0.25),
eval_f=function(lambda) -sum(log(apply(matrix(rep(lambda,), l, 4, byrow = T)*p[1:l, ], 1, sum))),
eval_grad_f= function(lambda){
c(-sum(p[1:l, 1]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 2]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 3]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)),
-sum(p[1:l, 4]/apply(matrix(rep(lambda,l), l, 4, byrow = T)*p[1:l, ], 1, sum)))},
lb = c(0, 0, 0, 0),
ub = c(1, 1, 1, 1),
eval_g_eq = function(lambda) sum(lambda) - 1,
eval_jac_g_eq = function(lambda) c(1, 1, 1, 1),
opts = list("algorithm"="NLOPT_LD_AUGLAG",
"xtol_rel"=1.0e-8,
"local_opts"=local_opts))
table[277]
unigram["<unk>"]
unigram
unigram["<s>"]
shiny::runApp('/Volumes/Documents, Files, & Media/GitHub/TextPrediction/shinyapp')
library(shinyapps)
deployApp()
shiny::runApp('/Volumes/Documents, Files, & Media/GitHub/TextPrediction/shinyapp')
